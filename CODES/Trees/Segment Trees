//public class SegmentTree {
//
//
//    private static class Node{
//        int data;
//        int startInterval;
//        int endInterval;
//        Node left;
//        Node right;
//
//        public Node(int StartInterval, int endInterval){
//            this.startInterval = startInterval;
//            this.endInterval = endInterval;
//        }
//    }
//    Node root;
//    public SegmentTree(int[] arr){
//        this.root = constructTree(arr, 0, arr.length-1);
//    }
//    private Node constructTree(int[] arr, int start, int end){
//        if (start==end){
//            Node leaf = new Node(start, end);
//            leaf.data = arr[start];
//            return leaf;
//        }
//        Node node= new Node(start, end);
//        int mid = (start+end)/2;
//
//        node.left =this.constructTree(arr, start, mid);
//        node.right =this.constructTree(arr, mid+1, end);
//
//
//        node.data = node.left.data+node.right.data;
//        return node;
//    }
//    public void display() {
//        display(this.root);
//    }
//    private void display(Node node){
//        String str = " ";
//        if (node.left!=null){
//            str = str + "Interval = [" + node.left.startInterval + "-" + node.left.endInterval + "]" + node.left.data + "=>";
//        }else{
//            str = str + "No  left child";
//        }
//        //for current node
//        str = str + "Interval = [" + node.startInterval + "-" + node.endInterval + "]" + node.data + "<=";
//        if (node.right!=null){
//            str = str + "Interval = [" + node.right.startInterval + "-" + node.right.endInterval + "]" + node.right.data ;
//        }else{
//            str = str + "No right child ";
//        }
//        System.out.println(str+"\n");
//
//
//        if(node.left!=null){
//            display(node.left);
//        }
//        if(node.right!=null){
//            display(node.right);
//        }
//
//    }
//
//    //    query
//    public int query(int qsi, int qei){
//        return this.query(this.root, qsi, qei);
//    }
//    private int query(Node node , int qsi, int qei){
//        if(node.startInterval>= qsi&&node.endInterval<=qei){
//            return node.data;
//        }else if(node.startInterval>qei||node.endInterval<qsi){
//            return 0;
//        }else {
//            return this.query(node.left, qsi, qei) + this.query(node.right, qsi, qei);
//        }
//    }
//    //     update
//    public void update(int index, int value){
//        this.root.data = update(this.root, index, value);
//    }
//    private int update(Node node, int index, int value){
//        if (index>=node.startInterval && index<= node.endInterval){
//            if (index==node.startInterval && index.node.endInterval){
//                node.data = value;
//                return node.data;
//            }else{
//                int leftAns = update(node.left, index, value);
//                int rightAns = update(node.right, index, value);
//                node.data = leftAns+rightAns;
//                return node.data;
//            }
//        }
//        return node.data;
//    }
//}
public class SegmentTree {

    private static class Node {
        int data;
        int startInterval;
        int endInterval;
        Node left;
        Node right;

        public Node(int startInterval, int endInterval) {
            this.startInterval = startInterval;
            this.endInterval = endInterval;
        }
    }

    private Node root;

    public SegmentTree(int[] arr) {
        this.root = constructTree(arr, 0, arr.length - 1);
    }

    private Node constructTree(int[] arr, int start, int end) {
        if (start == end) {
            Node leaf = new Node(start, end);
            leaf.data = arr[start];
            return leaf;
        }

        Node node = new Node(start, end);
        int mid = (start + end) / 2;

        node.left = constructTree(arr, start, mid);
        node.right = constructTree(arr, mid + 1, end);

        node.data = node.left.data + node.right.data;
        return node;
    }

    public void display() {
        display(this.root);
    }

    private void display(Node node) {
        String str = "";
        if (node.left != null) {
            str += "Interval = [" + node.left.startInterval + "-" + node.left.endInterval + "] " + node.left.data + " => ";
        } else {
            str += "No left child => ";
        }

        str += "Interval = [" + node.startInterval + "-" + node.endInterval + "] " + node.data + " <= ";

        if (node.right != null) {
            str += "Interval = [" + node.right.startInterval + "-" + node.right.endInterval + "] " + node.right.data;
        } else {
            str += "No right child";
        }

        System.out.println(str);

        if (node.left != null) display(node.left);
        if (node.right != null) display(node.right);
    }

    // Query
    public int query(int qsi, int qei) {
        return query(this.root, qsi, qei);
    }

    private int query(Node node, int qsi, int qei) {
        // complete overlap
        if (node.startInterval >= qsi && node.endInterval <= qei) {
            return node.data;
        }
        // no overlap
        if (node.endInterval < qsi || node.startInterval > qei) {
            return 0;
        }
        // partial overlap
        return query(node.left, qsi, qei) + query(node.right, qsi, qei);
    }

    // Update
    public void update(int index, int value) {
        update(this.root, index, value);
    }

    private int update(Node node, int index, int value) {
        if (index < node.startInterval || index > node.endInterval) {
            return node.data;
        }

        // Leaf node
        if (node.startInterval == node.endInterval) {
            node.data = value;
            return node.data;
        }

        int leftAns = update(node.left, index, value);
        int rightAns = update(node.right, index, value);
        node.data = leftAns + rightAns;

        return node.data;
    }

    // Test
    public static void main(String[] args) {
        int[] arr = {1, 3, 5, 7, 9, 11};
        SegmentTree st = new SegmentTree(arr);
        st.display();

        System.out.println("Query(1,3): " + st.query(1, 3)); // 3+5+7 = 15
        st.update(1, 10);
        System.out.println("After update:");
        st.display();
        System.out.println("Query(1,3): " + st.query(1, 3)); // 10+5+7 = 22
    }
}




//main class
class Main{
    public static void main(String[] args) {
        int[] arr = {3, 8, 6, 7, -2, -8, 4, 9};
        SegmentTree tree = new SegmentTree(arr);
        tree.display();
        System.out.println(tree.query(1, 6));

    }
}
